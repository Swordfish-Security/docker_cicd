variables:
    DOCKER_HOST: "tcp://docker:2375/"
    DOCKERFILE: "mydockerfile.df" # name of the Dockerfile to analyse    
    # DOCKERIMAGE: "bkimminich/juice-shop" # name of the Docker image to analyse
    DOCKERIMAGE: "cloudinsky/cve-2017-5638" # test Docker image with several CRITICAL CVE 
    SHOWSTOPPER_PRIORITY: "CRITICAL" # what level of criticality will fail Trivy job
    TRIVYCACHE: "$CI_PROJECT_DIR/.cache" # where to cache Trivy database of vulnerabilities for faster reuse
    ARTIFACT_FOLDER: "$CI_PROJECT_DIR"

services:
    - docker:dind # to be able to build docker images inside the Runner

HadoLint (Dockerfile analysis):
    # Basic lint analysis of Dockerfile instructions
    image: docker:git

    tags:
    - docker

    after_script:
    - cat $ARTIFACT_FOLDER/hadolint_results.json

    script:
    - export VERSION=$(wget -q -O - https://api.github.com/repos/hadolint/hadolint/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/hadolint/hadolint/releases/download/v${VERSION}/hadolint-Linux-x86_64 && chmod +x hadolint-Linux-x86_64
    
    # NB: hadolint will always exit with 0 exit code
    - ./hadolint-Linux-x86_64 -f json $DOCKERFILE > $ARTIFACT_FOLDER/hadolint_results.json || exit 0 
    
    artifacts:
        paths:
        - hadolint_results.json

Dockle (best practices):
    # Analysing best practices about docker image (users permissions, instructions followed when image was built, etc.)
    image: docker:git

    tags:
    - docker

    after_script:
    - cat $ARTIFACT_FOLDER/dockle_results.json

    script:
    - docker run --rm -v $(pwd)/$DOCKERIMAGE:/$DOCKERIMAGE -v $ARTIFACT_FOLDER:/artifacts goodwithtech/dockle --exit-code 1 -f json --output /artifacts/dockle_results.json $DOCKERIMAGE    
    
    artifacts:
        paths:
        - dockle_results.json

Trivy (image CVE analysis):
    # Analysing docker image and package dependencies against several CVE bases
    image: docker:git

    tags:
    - docker

    script:
    # getting the latest Trivy
    - export VERSION=$(wget -q -O - https://api.github.com/repos/knqyf263/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/knqyf263/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
    - tar zxf trivy_${VERSION}_Linux-64bit.tar.gz
    
    # displaying all vulnerabilities w/o failing the build
    - ./trivy --auto-refresh --clear-cache --cache-dir $TRIVYCACHE -f json -o $ARTIFACT_FOLDER/trivy_results.json --exit-code 0 --quiet $DOCKERIMAGE
    - cat $ARTIFACT_FOLDER/trivy_results.json

    # failing the build if the SHOWSTOPPER priority is found
    - ./trivy --auto-refresh --cache-dir $TRIVYCACHE --exit-code 1 --severity $SHOWSTOPPER_PRIORITY --quiet $DOCKERIMAGE
        
    artifacts:
        paths:
        - trivy_results.json

    cache:
        paths:
        - .cache